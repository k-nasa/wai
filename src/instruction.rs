use crate::opcode::Opcode;
use crate::types::*;

#[derive(Clone, Copy, Debug, PartialEq)]
pub enum Instruction {
    Unexpected(u8),
    Nop,
    Block(BlockType),
    Loop(BlockType),
    If(BlockType),
    Else,
    End,
    Br(VerUintN),
    BrIf(VerUintN),
    BrTable,
    Return,
    Call(VerUintN),
    CallIndirect,
    Drop,
    Select,
    GetLocal(VerUintN),
    SetLocal(VerUintN),
    TeeLocal(VerUintN),
    GetGlobal(VerUintN),
    SetGlobal(VerUintN),
    I32Load(u32, u32),
    I64Load(u32, u32),
    F32Load(u32, u32),
    F64Load(u32, u32),
    I32Load8S(u32, u32),
    I32Load8U(u32, u32),
    I32Load16S(u32, u32),
    I32Load16U(u32, u32),
    I64Load8S(u32, u32),
    I64Load8U(u32, u32),
    I64Load16S(u32, u32),
    I64Load16U(u32, u32),
    I64Load32S(u32, u32),
    I64Load32U(u32, u32),
    I32Store(u32, u32),
    I64Store(u32, u32),
    F32Store(u32, u32),
    F64Store(u32, u32),
    I32Store8(u32, u32),
    I32Store16(u32, u32),
    I64Store8(u32, u32),
    I64Store16(u32, u32),
    I64Store32(u32, u32),
    CurrentMemory(VerUintN),
    GrowMemory(VerUintN),
    I32Const(i32),
    I64Const(i64),
    F32Const(f32),
    F64Const(f64),
    I32Eqz,
    I32Eq,
    I32Ne,
    I32LtS,
    I32LtU,
    I32GtS,
    I32GtU,
    I32LeS,
    I32LeU,
    I32GeS,
    I32GeU,
    I64Eqz,
    I64Eq,
    I64Ne,
    I64LtS,
    I64LtU,
    I64GtS,
    I64GtU,
    I64LeS,
    I64LeU,
    I64GeS,
    I64GeU,
    F32Eq,
    F32Ne,
    F32Lt,
    F32Gt,
    F32Le,
    F32Ge,
    F64Eq,
    F64Ne,
    F64Lt,
    F64Gt,
    F64Le,
    F64Ge,
    I32Clz,
    I32Ctz,
    I32Popcnt,
    I32Add,
    I32Sub,
    I32Mul,
    I32DivS,
    I32DivU,
    I32RemS,
    I32RemU,
    I32And,
    I32Or,
    I32Xor,
    I32Shl,
    I32ShrS,
    I32ShrU,
    I32Rotl,
    I32Rotr,
    I64Clz,
    I64Ctz,
    I64Popcnt,
    I64Add,
    I64Sub,
    I64Mul,
    I64DivS,
    I64DivU,
    I64RemS,
    I64RemU,
    I64And,
    I64Or,
    I64Xor,
    I64Shl,
    I64ShrS,
    I64ShrU,
    I64Rotl,
    I64Rotr,
    F32Abs,
    F32Neg,
    F32Ceil,
    F32Floor,
    F32Trunc,
    F32Nearest,
    F32Sqrt,
    F32Add,
    F32Sub,
    F32Mul,
    F32Div,
    F32Min,
    F32Max,
    F32Copysign,
    F64Abs,
    F64Neg,
    F64Ceil,
    F64Floor,
    F64Trunc,
    F64Nearest,
    F64Sqrt,
    F64Add,
    F64Sub,
    F64Mul,
    F64Div,
    F64Min,
    F64Max,
    F64Copysign,
    I32WrapI64,
    I32TruncSF32,
    I32TruncUF32,
    I32TruncSF64,
    I32TruncUF64,
    I64ExtendSI32,
    I64ExtendUI32,
    I64TruncSF32,
    I64TruncUF32,
    I64TruncSF64,
    I64TruncUF64,
    F32ConvertSI32,
    F32ConvertUI32,
    F32ConvertSI64,
    F32ConvertUI64,
    F32DemoteF64,
    F64ConvertSI32,
    F64ConvertUI32,
    F64ConvertSI64,
    F64ConvertUI64,
    F64PromoteF32,
    I32ReinterpretF32,
    I64ReinterpretF64,
    F32ReinterpretI32,
    F64ReinterpretI64,
}

impl From<Opcode> for Instruction {
    fn from(opcode: Opcode) -> Self {
        use Instruction::*;
        match opcode {
            Opcode::Nop => Nop,
            Opcode::Else => Else,
            Opcode::End => End,
            Opcode::BrTable => BrTable,
            Opcode::Return => Return,
            Opcode::CallIndirect => CallIndirect,
            Opcode::Drop => Drop,
            Opcode::Select => Select,
            Opcode::I32Eqz => I32Eqz,
            Opcode::I32Eq => I32Eq,
            Opcode::I32Ne => I32Ne,
            Opcode::I32LtS => I32LtS,
            Opcode::I32LtU => I32LtU,
            Opcode::I32GtS => I32GtS,
            Opcode::I32GtU => I32GtU,
            Opcode::I32LeS => I32LeS,
            Opcode::I32LeU => I32LeU,
            Opcode::I32GeS => I32GeS,
            Opcode::I32GeU => I32GeU,
            Opcode::I64Eqz => I64Eqz,
            Opcode::Nop => I64Eq,
            Opcode::Nop => I64Ne,
            Opcode::Nop => I64LtS,
            Opcode::Nop => I64LtU,
            Opcode::Nop => I64GtS,
            Opcode::Nop => I64GtU,
            Opcode::Nop => I64LeS,
            Opcode::Nop => I64LeU,
            Opcode::Nop => I64GeS,
            Opcode::Nop => I64GeU,
            Opcode::Nop => F32Eq,
            Opcode::Nop => F32Ne,
            Opcode::Nop => F32Lt,
            Opcode::Nop => F32Gt,
            Opcode::Nop => F32Le,
            Opcode::Nop => F32Ge,
            Opcode::Nop => F64Eq,
            Opcode::Nop => F64Ne,
            Opcode::Nop => F64Lt,
            Opcode::Nop => F64Gt,
            Opcode::Nop => F64Le,
            Opcode::Nop => F64Ge,
            Opcode::I32Clz => I32Clz,
            Opcode::I32Ctz => I32Ctz,
            Opcode::I32Popcnt => I32Popcnt,
            Opcode::I32Add => I32Add,
            Opcode::I32Sub => I32Sub,
            Opcode::I32Mul => I32Mul,
            Opcode::I32DivS => I32DivS,
            Opcode::I32DivU => I32DivU,
            Opcode::I32RemS => I32RemS,
            Opcode::I32RemU => I32RemU,
            Opcode::I32And => I32And,
            Opcode::I32Or => I32Or,
            Opcode::I32Xor => I32Xor,
            Opcode::I32Shl => I32Shl,
            Opcode::I32ShrS => I32ShrS,
            Opcode::I32ShrU => I32ShrU,
            Opcode::I32Rotl => I32Rotl,
            Opcode::I32Rotr => I32Rotr,
            Opcode::Nop => I64Clz,
            Opcode::Nop => I64Ctz,
            Opcode::Nop => I64Popcnt,
            Opcode::Nop => I64Add,
            Opcode::Nop => I64Sub,
            Opcode::Nop => I64Mul,
            Opcode::Nop => I64DivS,
            Opcode::Nop => I64DivU,
            Opcode::Nop => I64RemS,
            Opcode::Nop => I64RemU,
            Opcode::Nop => I64And,
            Opcode::Nop => I64Or,
            Opcode::Nop => I64Xor,
            Opcode::Nop => I64Shl,
            Opcode::Nop => I64ShrS,
            Opcode::Nop => I64ShrU,
            Opcode::Nop => I64Rotl,
            Opcode::Nop => I64Rotr,
            Opcode::Nop => F32Abs,
            Opcode::Nop => F32Neg,
            Opcode::Nop => F32Ceil,
            Opcode::Nop => F32Floor,
            Opcode::Nop => F32Trunc,
            Opcode::Nop => F32Nearest,
            Opcode::Nop => F32Sqrt,
            Opcode::Nop => F32Add,
            Opcode::Nop => F32Sub,
            Opcode::Nop => F32Mul,
            Opcode::Nop => F32Div,
            Opcode::Nop => F32Min,
            Opcode::Nop => F32Max,
            Opcode::Nop => F32Copysign,
            Opcode::Nop => F64Abs,
            Opcode::Nop => F64Neg,
            Opcode::Nop => F64Ceil,
            Opcode::Nop => F64Floor,
            Opcode::Nop => F64Trunc,
            Opcode::Nop => F64Nearest,
            Opcode::Nop => F64Sqrt,
            Opcode::Nop => F64Add,
            Opcode::Nop => F64Sub,
            Opcode::Nop => F64Mul,
            Opcode::Nop => F64Div,
            Opcode::Nop => F64Min,
            Opcode::Nop => F64Max,
            Opcode::Nop => F64Copysign,
            Opcode::Nop => I32WrapI64,
            Opcode::Nop => I32TruncSF32,
            Opcode::Nop => I32TruncUF32,
            Opcode::Nop => I32TruncSF64,
            Opcode::Nop => I32TruncUF64,
            Opcode::Nop => I64ExtendSI32,
            Opcode::Nop => I64ExtendUI32,
            Opcode::Nop => I64TruncSF32,
            Opcode::Nop => I64TruncUF32,
            Opcode::Nop => I64TruncSF64,
            Opcode::Nop => I64TruncUF64,
            Opcode::Nop => F32ConvertSI32,
            Opcode::Nop => F32ConvertUI32,
            Opcode::Nop => F32ConvertSI64,
            Opcode::Nop => F32ConvertUI64,
            Opcode::Nop => F32DemoteF64,
            Opcode::Nop => F64ConvertSI32,
            Opcode::Nop => F64ConvertUI32,
            Opcode::Nop => F64ConvertSI64,
            Opcode::Nop => F64ConvertUI64,
            Opcode::Nop => F64PromoteF32,
            Opcode::Nop => I32ReinterpretF32,
            Opcode::Nop => I64ReinterpretF64,
            Opcode::Nop => F32ReinterpretI32,
            Opcode::Nop => F64ReinterpretI64,
            _ => todo!("{:?}", opcode),
        }
    }
}
